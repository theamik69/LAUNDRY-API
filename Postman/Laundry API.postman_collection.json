{
	"info": {
		"_postman_id": "d1501a29-211a-4ca5-9345-1d0b784c3e17",
		"name": "Laundry API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "25134832"
	},
	"item": [
		{
			"name": "Admin Testing",
			"item": [
				{
					"name": "Add Admin With Valid Payload",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 201 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('success');\r",
									"    pm.expect(responseJson.id).to.be.a('string');\r",
									"    pm.expect(responseJson.message).to.equal('User registered successfully!');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "id",
									"value": "admin1",
									"type": "text"
								},
								{
									"key": "role",
									"value": "ADMIN",
									"type": "text"
								},
								{
									"key": "password",
									"value": "admin1234",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://localhost:3000/admin/signup",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"admin",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Admin 2 With Valid Payload",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 201 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('success');\r",
									"    pm.expect(responseJson.id).to.be.a('string');\r",
									"    pm.expect(responseJson.message).to.equal('User registered successfully!');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "id",
									"value": "admin2",
									"type": "text"
								},
								{
									"key": "role",
									"value": "ADMIN",
									"type": "text"
								},
								{
									"key": "password",
									"value": "admin1234",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://localhost:3000/admin/signup",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"admin",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Admin With Already Taken Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 400 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('fail');\r",
									"    pm.expect(responseJson.id).to.be.a('string');\r",
									"    pm.expect(responseJson.message).to.equal('Id is already taken!');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "id",
									"value": "admin1",
									"type": "text"
								},
								{
									"key": "role",
									"value": "ADMIN",
									"type": "text"
								},
								{
									"key": "password",
									"value": "admin5687",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://localhost:3000/admin/signup",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"admin",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "Admin Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 201 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('success');\r",
									"    pm.expect(responseJson.id).to.be.a('string');\r",
									"    pm.expect(responseJson.accessToken).to.be.a('string');\r",
									"    \r",
									"    pm.environment.set('adminId', responseJson.id);\r",
									"    pm.environment.set('accessTokenAdmin', responseJson.accessToken);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "id",
									"value": "admin1",
									"type": "text"
								},
								{
									"key": "password",
									"value": "admin1234",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://localhost:3000/admin/signin",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"admin",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "Admin 2 Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 201 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('success');\r",
									"    pm.expect(responseJson.id).to.be.a('string');\r",
									"    pm.expect(responseJson.accessToken).to.be.a('string');\r",
									"    \r",
									"    pm.environment.set('admin2Id', responseJson.id);\r",
									"    pm.environment.set('accessTokenAdmin2', responseJson.accessToken);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "id",
									"value": "admin2",
									"type": "text"
								},
								{
									"key": "password",
									"value": "admin1234",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://localhost:3000/admin/signin",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"admin",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "(Admin 2) Change Password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 200 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('success');\r",
									"    pm.expect(responseJson.message).to.be.an('string');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json; charset=utf-8",
								"type": "text"
							},
							{
								"key": "x-access-token",
								"value": "{{accessTokenAdmin2}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "password",
									"value": "passwordbaru",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://localhost:3000/admin/{{admin2Id}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"admin",
								"{{admin2Id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "(Admin) Get All Admin Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 200 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('success');\r",
									"    pm.expect(responseJson.count).to.be.a('number');\r",
									"    pm.expect(responseJson.list_user).to.be.an('array');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json; charset=utf-8",
								"type": "text"
							},
							{
								"key": "x-access-token",
								"value": "{{accessTokenAdmin}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": []
						},
						"url": {
							"raw": "http://localhost:3000/admin/alladmin",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"admin",
								"alladmin"
							]
						}
					},
					"response": []
				},
				{
					"name": "(Admin 2) Delete User Admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 200 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('success');\r",
									"    pm.expect(responseJson.message).to.be.an('string');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json; charset=utf-8",
								"type": "text"
							},
							{
								"key": "x-access-token",
								"value": "{{accessTokenAdmin2}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": []
						},
						"url": {
							"raw": "http://localhost:3000/admin/{{admin2Id}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"admin",
								"{{admin2Id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "User Testing",
			"item": [
				{
					"name": "(Irsyad) Add User With Valid Payload",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 201 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('success');\r",
									"    pm.expect(responseJson.id).to.be.a('string');\r",
									"    pm.expect(responseJson.message).to.equal('User registered successfully!');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "user_name",
									"value": "MuhIrsyad",
									"type": "text"
								},
								{
									"key": "password",
									"value": "12345678",
									"type": "text"
								},
								{
									"key": "name",
									"value": "Muhama Irsyad",
									"type": "text"
								},
								{
									"key": "address",
									"value": "kopo",
									"type": "text"
								},
								{
									"key": "email",
									"value": "green@gmail.com",
									"type": "text"
								},
								{
									"key": "phone",
									"value": "08456795522",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://localhost:3000/user/registration",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"user",
								"registration"
							]
						}
					},
					"response": []
				},
				{
					"name": "(Agus) Add User With Valid Payload",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 201 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('success');\r",
									"    pm.expect(responseJson.id).to.be.a('string');\r",
									"    pm.expect(responseJson.message).to.equal('User registered successfully!');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "user_name",
									"value": "Acky",
									"type": "text"
								},
								{
									"key": "password",
									"value": "12345678",
									"type": "text"
								},
								{
									"key": "name",
									"value": "Ki Agus",
									"type": "text"
								},
								{
									"key": "address",
									"value": "Antapani",
									"type": "text"
								},
								{
									"key": "email",
									"value": "roll@gmail.com",
									"type": "text"
								},
								{
									"key": "phone",
									"value": "084566215622",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://localhost:3000/user/registration",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"user",
								"registration"
							]
						}
					},
					"response": []
				},
				{
					"name": "(Tyo) Add User With Valid Payload",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 201 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('success');\r",
									"    pm.expect(responseJson.id).to.be.a('string');\r",
									"    pm.expect(responseJson.message).to.equal('User registered successfully!');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "user_name",
									"value": "Tyo",
									"type": "text"
								},
								{
									"key": "password",
									"value": "12345678",
									"type": "text"
								},
								{
									"key": "name",
									"value": "Sulistyo",
									"type": "text"
								},
								{
									"key": "address",
									"value": "Katamso",
									"type": "text"
								},
								{
									"key": "email",
									"value": "tyo@gmail.com",
									"type": "text"
								},
								{
									"key": "phone",
									"value": "0846699333",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://localhost:3000/user/registration",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"user",
								"registration"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add User With Already Taken Username",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 400 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('fail');\r",
									"    pm.expect(responseJson.user_name).to.be.a('string');\r",
									"     pm.expect(responseJson.message).to.equal('User name is already taken!');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "user_name",
									"value": "MuhIrsyad",
									"type": "text"
								},
								{
									"key": "password",
									"value": "12345678",
									"type": "text"
								},
								{
									"key": "name",
									"value": "Abhu",
									"type": "text"
								},
								{
									"key": "address",
									"value": "Antapani",
									"type": "text"
								},
								{
									"key": "email",
									"value": "abhu@gmail.com",
									"type": "text"
								},
								{
									"key": "phone",
									"value": "0855158455",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://localhost:3000/user/registration",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"user",
								"registration"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add User with Already Taken Phone",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 400 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('fail');\r",
									"    pm.expect(responseJson.phone).to.be.a('string');\r",
									"     pm.expect(responseJson.message).to.equal('Phone number is already taken!');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "user_name",
									"value": "Nelson",
									"type": "text"
								},
								{
									"key": "password",
									"value": "12345678",
									"type": "text"
								},
								{
									"key": "name",
									"value": "Nelson",
									"type": "text"
								},
								{
									"key": "address",
									"value": "Laswi",
									"type": "text"
								},
								{
									"key": "email",
									"value": "nelson@gmail.com",
									"type": "text"
								},
								{
									"key": "phone",
									"value": "08456795522",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://localhost:3000/user/registration",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"user",
								"registration"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add User With Already Taken E-mail",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 400 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('fail');\r",
									"    pm.expect(responseJson.email).to.be.a('string');\r",
									"     pm.expect(responseJson.message).to.equal('E-mail is already taken!');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "user_name",
									"value": "Aju",
									"type": "text"
								},
								{
									"key": "password",
									"value": "12345678",
									"type": "text"
								},
								{
									"key": "name",
									"value": "Aju",
									"type": "text"
								},
								{
									"key": "address",
									"value": "Antapani",
									"type": "text"
								},
								{
									"key": "email",
									"value": "green@gmail.com",
									"type": "text"
								},
								{
									"key": "phone",
									"value": "0845679515",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://localhost:3000/user/registration",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"user",
								"registration"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login With User Irsyad",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 201 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('success');\r",
									"    pm.expect(responseJson.id).to.be.a('string');\r",
									"    pm.expect(responseJson.username).to.be.a('string');\r",
									"    pm.expect(responseJson.accessToken).to.be.a('string');\r",
									"    \r",
									"    pm.environment.set('userIdIrsyad', responseJson.id);\r",
									"    pm.environment.set('accessTokenIrsyad', responseJson.accessToken);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "user_name",
									"value": "MuhIrsyad",
									"type": "text"
								},
								{
									"key": "password",
									"value": "12345678",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://localhost:3000/user/signin",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"user",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login With User Agus",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 201 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('success');\r",
									"    pm.expect(responseJson.id).to.be.a('string');\r",
									"    pm.expect(responseJson.username).to.be.a('string');\r",
									"    pm.expect(responseJson.accessToken).to.be.a('string');\r",
									"    \r",
									"    pm.environment.set('userIdAgus', responseJson.id);\r",
									"    pm.environment.set('accessTokenAgus', responseJson.accessToken);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "user_name",
									"value": "Acky",
									"type": "text"
								},
								{
									"key": "password",
									"value": "12345678",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://localhost:3000/user/signin",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"user",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login With User Tyo",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 201 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('success');\r",
									"    pm.expect(responseJson.id).to.be.a('string');\r",
									"    pm.expect(responseJson.username).to.be.a('string');\r",
									"    pm.expect(responseJson.accessToken).to.be.a('string');\r",
									"    \r",
									"    pm.environment.set('userIdTyo', responseJson.id);\r",
									"    pm.environment.set('accessTokenTyo', responseJson.accessToken);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "user_name",
									"value": "Tyo",
									"type": "text"
								},
								{
									"key": "password",
									"value": "12345678",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://localhost:3000/user/signin",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"user",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "(Tyo) Update User Data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 200 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('success');\r",
									"    pm.expect(responseJson.message).to.equal('The user data has been updated');\r",
									"    \r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
								"key": "Content-Type",
								"value": "application/json; charset=utf-8",
								"type": "text"
							},
							{
								"key": "x-access-token",
								"value": "{{accessTokenTyo}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "password",
									"value": "passwordbaru",
									"type": "text"
								},
								{
									"key": "name",
									"value": "Tio Aja",
									"type": "text"
								},
								{
									"key": "address",
									"value": "buah batu",
									"type": "text"
								},
								{
									"key": "email",
									"value": "tioaja@gmail.com",
									"type": "text"
								},
								{
									"key": "phone",
									"value": "0875963214566",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://localhost:3000/user/{{userIdTyo}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"user",
								"{{userIdTyo}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "(Admin) Get All User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 200 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('success');\r",
									"    pm.expect(responseJson.count).to.be.a('number');\r",
									"    pm.expect(responseJson.list_user).to.be.an('array');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json; charset=utf-8",
								"type": "text"
							},
							{
								"key": "x-access-token",
								"value": "{{accessTokenAdmin}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": []
						},
						"url": {
							"raw": "http://localhost:3000/admin/alluser",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"admin",
								"alluser"
							]
						}
					},
					"response": []
				},
				{
					"name": "(Tyo) Delete User Account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 200 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('success');\r",
									"    pm.expect(responseJson.message).to.equal('User account has been deleted');\r",
									"    \r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
								"key": "Content-Type",
								"value": "application/json; charset=utf-8",
								"type": "text"
							},
							{
								"key": "x-access-token",
								"value": "{{accessTokenTyo}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": []
						},
						"url": {
							"raw": "http://localhost:3000/user/{{userIdTyo}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"user",
								"{{userIdTyo}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Worker Testing",
			"item": [
				{
					"name": "(Abhu) Admin assigns a Worker with the job of Receiver and a valid payload",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 201 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('success');\r",
									"    pm.expect(responseJson.id).to.be.a('string');\r",
									"    pm.expect(responseJson.message).to.equal('User registered successfully!');\r",
									"\r",
									"    pm.environment.set('userIdAbhu', responseJson.id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
								"key": "Content-Type",
								"value": "application/json; charset=utf-8",
								"type": "text"
							},
							{
								"key": "x-access-token",
								"value": "{{accessTokenAdmin}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "employee_id",
									"value": "457852335",
									"type": "text"
								},
								{
									"key": "job",
									"value": "RECEIVER",
									"type": "text"
								},
								{
									"key": "name",
									"value": "Abhu",
									"type": "text"
								},
								{
									"key": "password",
									"value": "12345678",
									"type": "text"
								},
								{
									"key": "email",
									"value": "abhu@gmail.com",
									"type": "text"
								},
								{
									"key": "phone",
									"value": "0844552358",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://localhost:3000/admin/worker/registration",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"admin",
								"worker",
								"registration"
							]
						}
					},
					"response": []
				},
				{
					"name": "(Abhu) Assign the Same Worker to Another Job",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 400 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('fail');\r",
									"    pm.expect(responseJson.id).to.be.a('string');\r",
									"    pm.expect(responseJson.name).to.be.a('string');\r",
									"    pm.expect(responseJson.message).to.equal('The Worker has already taken job');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json; charset=utf-8",
								"type": "text"
							},
							{
								"key": "x-access-token",
								"value": "{{accessTokenAdmin}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "employee_id",
									"value": "457852335",
									"type": "text"
								},
								{
									"key": "job",
									"value": "SHIPPER",
									"type": "text"
								},
								{
									"key": "name",
									"value": "Abhu",
									"type": "text"
								},
								{
									"key": "password",
									"value": "12345678",
									"type": "text"
								},
								{
									"key": "email",
									"value": "abhu@gmail.com",
									"type": "text"
								},
								{
									"key": "phone",
									"value": "0844552358",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://localhost:3000/admin/worker/registration",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"admin",
								"worker",
								"registration"
							]
						}
					},
					"response": []
				},
				{
					"name": "(Aju) Admin assigns a Worker with the job of Laundryman and a valid payload",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 201 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('success');\r",
									"    pm.expect(responseJson.id).to.be.a('string');\r",
									"    pm.expect(responseJson.message).to.equal('User registered successfully!');\r",
									"\r",
									"    pm.environment.set('userIdAju', responseJson.id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json; charset=utf-8",
								"type": "text"
							},
							{
								"key": "x-access-token",
								"value": "{{accessTokenAdmin}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "employee_id",
									"value": "452678931",
									"type": "text"
								},
								{
									"key": "job",
									"value": "LAUNDRYMAN",
									"type": "text"
								},
								{
									"key": "name",
									"value": "Aju",
									"type": "text"
								},
								{
									"key": "password",
									"value": "12345678",
									"type": "text"
								},
								{
									"key": "email",
									"value": "aju@gmail.com",
									"type": "text"
								},
								{
									"key": "phone",
									"value": "0844525853",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://localhost:3000/admin/worker/registration",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"admin",
								"worker",
								"registration"
							]
						}
					},
					"response": []
				},
				{
					"name": "(Nelson) Admin assigns a Worker with the job of Shipper and a valid payload",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 201 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('success');\r",
									"    pm.expect(responseJson.id).to.be.a('string');\r",
									"    pm.expect(responseJson.message).to.equal('User registered successfully!');\r",
									"\r",
									"    pm.environment.set('userIdNelson', responseJson.id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json; charset=utf-8",
								"type": "text"
							},
							{
								"key": "x-access-token",
								"value": "{{accessTokenAdmin}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "employee_id",
									"value": "457852789",
									"type": "text"
								},
								{
									"key": "job",
									"value": "SHIPPER",
									"type": "text"
								},
								{
									"key": "name",
									"value": "Nelson",
									"type": "text"
								},
								{
									"key": "password",
									"value": "12345678",
									"type": "text"
								},
								{
									"key": "email",
									"value": "nelson@gmail.com",
									"type": "text"
								},
								{
									"key": "phone",
									"value": "0857933352",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://localhost:3000/admin/worker/registration",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"admin",
								"worker",
								"registration"
							]
						}
					},
					"response": []
				},
				{
					"name": "(Doyok) Admin assigns a Worker with the job of Receiver and a valid payload",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 201 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('success');\r",
									"    pm.expect(responseJson.id).to.be.a('string');\r",
									"    pm.expect(responseJson.message).to.equal('User registered successfully!');\r",
									"\r",
									"    pm.environment.set('userIdDoyok', responseJson.id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
								"key": "Content-Type",
								"value": "application/json; charset=utf-8",
								"type": "text"
							},
							{
								"key": "x-access-token",
								"value": "{{accessTokenAdmin}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "employee_id",
									"value": "457889966",
									"type": "text"
								},
								{
									"key": "job",
									"value": "RECEIVER",
									"type": "text"
								},
								{
									"key": "name",
									"value": "Doyok",
									"type": "text"
								},
								{
									"key": "password",
									"value": "12345678",
									"type": "text"
								},
								{
									"key": "email",
									"value": "doyok@gmail.com",
									"type": "text"
								},
								{
									"key": "phone",
									"value": "08445556448",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://localhost:3000/admin/worker/registration",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"admin",
								"worker",
								"registration"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Worker With Already Taken E-mail",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 400 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('fail');\r",
									"    pm.expect(responseJson.email).to.be.a('string');\r",
									"     pm.expect(responseJson.message).to.equal('E-mail is already taken!');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json; charset=utf-8",
								"type": "text"
							},
							{
								"key": "x-access-token",
								"value": "{{accessTokenAdmin}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "employee_id",
									"value": "45778852",
									"type": "text"
								},
								{
									"key": "job",
									"value": "RECEIVER",
									"type": "text"
								},
								{
									"key": "name",
									"value": "Doyok",
									"type": "text"
								},
								{
									"key": "password",
									"value": "12345678",
									"type": "text"
								},
								{
									"key": "email",
									"value": "abhu@gmail.com",
									"type": "text"
								},
								{
									"key": "phone",
									"value": "08145524522",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://localhost:3000/admin/worker/registration",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"admin",
								"worker",
								"registration"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Worker with Already Taken Phone",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 400 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('fail');\r",
									"    pm.expect(responseJson.phone).to.be.a('string');\r",
									"     pm.expect(responseJson.message).to.equal('Phone number is already taken!');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json; charset=utf-8",
								"type": "text"
							},
							{
								"key": "x-access-token",
								"value": "{{accessTokenAdmin}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "employee_id",
									"value": "45779955",
									"type": "text"
								},
								{
									"key": "job",
									"value": "SHIPPER",
									"type": "text"
								},
								{
									"key": "name",
									"value": "Zaki",
									"type": "text"
								},
								{
									"key": "password",
									"value": "12345678",
									"type": "text"
								},
								{
									"key": "email",
									"value": "zaki@gmail.com",
									"type": "text"
								},
								{
									"key": "phone",
									"value": "0857933352",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://localhost:3000/admin/worker/registration",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"admin",
								"worker",
								"registration"
							]
						}
					},
					"response": []
				},
				{
					"name": "(Abhu) Login Worker As Receiver",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 201 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('success');\r",
									"    pm.expect(responseJson.id).to.be.a('string');\r",
									"    pm.expect(responseJson.accessToken).to.be.a('string');\r",
									"    \r",
									"    pm.environment.set('accessTokenAbhu', responseJson.accessToken);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "employee_id",
									"value": "{{userIdAbhu}}",
									"type": "text"
								},
								{
									"key": "password",
									"value": "12345678",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://localhost:3000/worker/signin",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"worker",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "(Doyok) Login Worker As Receiver",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 201 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('success');\r",
									"    pm.expect(responseJson.id).to.be.a('string');\r",
									"    pm.expect(responseJson.accessToken).to.be.a('string');\r",
									"    \r",
									"    pm.environment.set('accessTokenDoyok', responseJson.accessToken);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "employee_id",
									"value": "{{userIdDoyok}}",
									"type": "text"
								},
								{
									"key": "password",
									"value": "12345678",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://localhost:3000/worker/signin",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"worker",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "(Nelson) Login Worker As Shipper",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 201 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('success');\r",
									"    pm.expect(responseJson.id).to.be.a('string');\r",
									"    pm.expect(responseJson.accessToken).to.be.a('string');\r",
									"    \r",
									"    pm.environment.set('accessTokenNelson', responseJson.accessToken);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "employee_id",
									"value": "{{userIdNelson}}",
									"type": "text"
								},
								{
									"key": "password",
									"value": "12345678",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://localhost:3000/worker/signin",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"worker",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "(Aju) Login Worker As Laundryman",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 201 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('success');\r",
									"    pm.expect(responseJson.id).to.be.a('string');\r",
									"    pm.expect(responseJson.accessToken).to.be.a('string');\r",
									"    \r",
									"    pm.environment.set('accessTokenAju', responseJson.accessToken);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "employee_id",
									"value": "{{userIdAju}}",
									"type": "text"
								},
								{
									"key": "password",
									"value": "12345678",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://localhost:3000/worker/signin",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"worker",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "(Doyok) Update Worker Data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 200 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('success');\r",
									"    pm.expect(responseJson.message).to.equal('The data has been updated');\r",
									"    \r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
								"key": "Content-Type",
								"value": "application/json; charset=utf-8",
								"type": "text"
							},
							{
								"key": "x-access-token",
								"value": "{{accessTokenDoyok}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "name",
									"value": "Doyok Oke",
									"type": "text"
								},
								{
									"key": "password",
									"value": "passwordbaru",
									"type": "text"
								},
								{
									"key": "email",
									"value": "oke@gmail.com",
									"type": "text"
								},
								{
									"key": "phone",
									"value": "087596655662",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://localhost:3000/worker/{{userIdDoyok}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"worker",
								"{{userIdDoyok}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "(Admin) Get All Worker",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 200 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('success');\r",
									"    pm.expect(responseJson.count).to.be.a('number');\r",
									"    pm.expect(responseJson.list_worker).to.be.an('array');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json; charset=utf-8",
								"type": "text"
							},
							{
								"key": "x-access-token",
								"value": "{{accessTokenAdmin}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": []
						},
						"url": {
							"raw": "http://localhost:3000/admin/allworker",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"admin",
								"allworker"
							]
						}
					},
					"response": []
				},
				{
					"name": "(Doyok) Admin Delete a Worker",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 200 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('success');\r",
									"    pm.expect(responseJson.message).to.equal('User account has been deleted');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
								"key": "Content-Type",
								"value": "application/json; charset=utf-8",
								"type": "text"
							},
							{
								"key": "x-access-token",
								"value": "{{accessTokenAdmin}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": []
						},
						"url": {
							"raw": "http://localhost:3000/admin/worker/{{userIdDoyok}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"admin",
								"worker",
								"{{userIdDoyok}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Order Test",
			"item": [
				{
					"name": "(Irsyad) Create Order Laundry Kiloan",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 200 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('success');\r",
									"    pm.expect(responseJson.id).to.be.a('string');\r",
									"    pm.expect(responseJson.totalPrice).to.be.a('number');\r",
									"    pm.expect(responseJson.message).to.equal('Pickup arranged');\r",
									"    \r",
									"    pm.environment.set('orderIdCuciKiloByIrsyad', responseJson.id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json; charset=utf-8",
								"type": "text"
							},
							{
								"key": "x-access-token",
								"value": "{{accessTokenIrsyad}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "user_id",
									"value": "{{userIdIrsyad}}",
									"type": "text"
								},
								{
									"key": "name",
									"value": "Irsyad",
									"type": "text"
								},
								{
									"key": "laundry_tipe",
									"value": "LAUNDRY KILOAN",
									"type": "text"
								},
								{
									"key": "qty",
									"value": "5",
									"type": "text"
								},
								{
									"key": "pickup_at",
									"value": "Dago",
									"type": "text"
								},
								{
									"key": "delivery_to",
									"value": "Dago",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://localhost:3000/order",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"order"
							]
						}
					},
					"response": []
				},
				{
					"name": "(Irsyad) Create Order Jas",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 200 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('success');\r",
									"    pm.expect(responseJson.id).to.be.a('string');\r",
									"    pm.expect(responseJson.totalPrice).to.be.a('number');\r",
									"    pm.expect(responseJson.message).to.equal('Pickup arranged');\r",
									"    \r",
									"    pm.environment.set('orderIdJasByIrsyad', responseJson.id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json; charset=utf-8",
								"type": "text"
							},
							{
								"key": "x-access-token",
								"value": "{{accessTokenIrsyad}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "user_id",
									"value": "{{userIdIrsyad}}",
									"type": "text"
								},
								{
									"key": "name",
									"value": "Irsyad",
									"type": "text"
								},
								{
									"key": "laundry_tipe",
									"value": "JAS",
									"type": "text"
								},
								{
									"key": "qty",
									"value": "1",
									"type": "text"
								},
								{
									"key": "pickup_at",
									"value": "Dago",
									"type": "text"
								},
								{
									"key": "delivery_to",
									"value": "Dago",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://localhost:3000/order",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"order"
							]
						}
					},
					"response": []
				},
				{
					"name": "(Irsyad) Create Order Cuci Sepatu",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 200 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('success');\r",
									"    pm.expect(responseJson.id).to.be.a('string');\r",
									"    pm.expect(responseJson.totalPrice).to.be.a('number');\r",
									"    pm.expect(responseJson.message).to.equal('Pickup arranged');\r",
									"    \r",
									"    pm.environment.set('orderIdCuciSepatuByIrsyad', responseJson.id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json; charset=utf-8",
								"type": "text"
							},
							{
								"key": "x-access-token",
								"value": "{{accessTokenIrsyad}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "user_id",
									"value": "{{userIdIrsyad}}",
									"type": "text"
								},
								{
									"key": "name",
									"value": "Irsyad",
									"type": "text"
								},
								{
									"key": "laundry_tipe",
									"value": "SEPATU",
									"type": "text"
								},
								{
									"key": "qty",
									"value": "5",
									"type": "text"
								},
								{
									"key": "pickup_at",
									"value": "Dago",
									"type": "text"
								},
								{
									"key": "delivery_to",
									"value": "Dago",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://localhost:3000/order",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"order"
							]
						}
					},
					"response": []
				},
				{
					"name": "(Irsyad) Create Order Cuci Handuk Besar",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 200 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('success');\r",
									"    pm.expect(responseJson.id).to.be.a('string');\r",
									"    pm.expect(responseJson.totalPrice).to.be.a('number');\r",
									"    pm.expect(responseJson.message).to.equal('Pickup arranged');\r",
									"    \r",
									"    pm.environment.set('orderIdCuciHandunkBesarByIrsyad', responseJson.id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json; charset=utf-8",
								"type": "text"
							},
							{
								"key": "x-access-token",
								"value": "{{accessTokenIrsyad}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "user_id",
									"value": "{{userIdIrsyad}}",
									"type": "text"
								},
								{
									"key": "name",
									"value": "Irsyad",
									"type": "text"
								},
								{
									"key": "laundry_tipe",
									"value": "HANDUK BESAR",
									"type": "text"
								},
								{
									"key": "qty",
									"value": "5",
									"type": "text"
								},
								{
									"key": "pickup_at",
									"value": "Dago",
									"type": "text"
								},
								{
									"key": "delivery_to",
									"value": "Dago",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://localhost:3000/order",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"order"
							]
						}
					},
					"response": []
				},
				{
					"name": "(Agus) Create Order Cuci Jas",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 200 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('success');\r",
									"    pm.expect(responseJson.id).to.be.a('string');\r",
									"    pm.expect(responseJson.totalPrice).to.be.a('number');\r",
									"    pm.expect(responseJson.message).to.equal('Pickup arranged');\r",
									"    \r",
									"    pm.environment.set('orderIdCuciJasByAgus', responseJson.id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
								"key": "Content-Type",
								"value": "application/json; charset=utf-8",
								"type": "text"
							},
							{
								"key": "x-access-token",
								"value": "{{accessTokenAgus}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "user_id",
									"value": "{{userIdAgus}}",
									"type": "text"
								},
								{
									"key": "name",
									"value": "Agus",
									"type": "text"
								},
								{
									"key": "laundry_tipe",
									"value": "JAS",
									"type": "text"
								},
								{
									"key": "qty",
									"value": "10",
									"type": "text"
								},
								{
									"key": "pickup_at",
									"value": "Antapani",
									"type": "text"
								},
								{
									"key": "delivery_to",
									"value": "Antapani",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://localhost:3000/order",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"order"
							]
						}
					},
					"response": []
				},
				{
					"name": "(Agus) Create Order Cuci Handuk Kecil",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 200 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('success');\r",
									"    pm.expect(responseJson.id).to.be.a('string');\r",
									"    pm.expect(responseJson.totalPrice).to.be.a('number');\r",
									"    pm.expect(responseJson.message).to.equal('Pickup arranged');\r",
									"    \r",
									"    pm.environment.set('orderIdCuciHandukKecilByAgus', responseJson.id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
								"key": "Content-Type",
								"value": "application/json; charset=utf-8",
								"type": "text"
							},
							{
								"key": "x-access-token",
								"value": "{{accessTokenAgus}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "user_id",
									"value": "{{userIdAgus}}",
									"type": "text"
								},
								{
									"key": "name",
									"value": "Agus",
									"type": "text"
								},
								{
									"key": "laundry_tipe",
									"value": "Handuk Kecil",
									"type": "text"
								},
								{
									"key": "qty",
									"value": "8",
									"type": "text"
								},
								{
									"key": "pickup_at",
									"value": "Antapani",
									"type": "text"
								},
								{
									"key": "delivery_to",
									"value": "Antapani",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://localhost:3000/order",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"order"
							]
						}
					},
					"response": []
				},
				{
					"name": "(Agus) Create Order Cuci Bad Cover",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 200 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('success');\r",
									"    pm.expect(responseJson.id).to.be.a('string');\r",
									"    pm.expect(responseJson.totalPrice).to.be.a('number');\r",
									"    pm.expect(responseJson.message).to.equal('Pickup arranged');\r",
									"    \r",
									"    pm.environment.set('orderIdCuciBadCoverByAgus', responseJson.id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
								"key": "Content-Type",
								"value": "application/json; charset=utf-8",
								"type": "text"
							},
							{
								"key": "x-access-token",
								"value": "{{accessTokenAgus}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "user_id",
									"value": "{{userIdAgus}}",
									"type": "text"
								},
								{
									"key": "name",
									"value": "Agus",
									"type": "text"
								},
								{
									"key": "laundry_tipe",
									"value": "BAD COVER",
									"type": "text"
								},
								{
									"key": "qty",
									"value": "8",
									"type": "text"
								},
								{
									"key": "pickup_at",
									"value": "Antapani",
									"type": "text"
								},
								{
									"key": "delivery_to",
									"value": "Antapani",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://localhost:3000/order",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"order"
							]
						}
					},
					"response": []
				},
				{
					"name": "(Abhu) Receiver Confirmed Receiver Status From Order Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 200 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('success');\r",
									"    pm.expect(responseJson.message).to.equal('Receiver status has been confirmed');\r",
									"    \r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json; charset=utf-8",
								"type": "text"
							},
							{
								"key": "x-access-token",
								"value": "{{accessTokenAbhu}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "receiver_status",
									"value": "CONFIRMED",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://localhost:3000/worker/receiver/{{orderIdCuciKiloByIrsyad}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"worker",
								"receiver",
								"{{orderIdCuciKiloByIrsyad}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "(Abhu) Receiver Confirmed Receiver Status From Order Jas Agus",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 200 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('success');\r",
									"    pm.expect(responseJson.message).to.equal('Receiver status has been confirmed');\r",
									"    \r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json; charset=utf-8",
								"type": "text"
							},
							{
								"key": "x-access-token",
								"value": "{{accessTokenAbhu}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "receiver_status",
									"value": "CONFIRMED",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://localhost:3000/worker/receiver/{{orderIdCuciJasByAgus}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"worker",
								"receiver",
								"{{orderIdCuciJasByAgus}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "(Aju) Laundryman Try to Confirmed Receiver Status From Order Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 403 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(403);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('fail');\r",
									"    pm.expect(responseJson.message).to.equal('Require Receiver Role');\r",
									"    \r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
								"key": "Content-Type",
								"value": "application/json; charset=utf-8",
								"type": "text"
							},
							{
								"key": "x-access-token",
								"value": "{{accessTokenAju}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "receiver_status",
									"value": "CONFIRMED",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://localhost:3000/worker/receiver/{{orderIdCuciKiloByIrsyad}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"worker",
								"receiver",
								"{{orderIdCuciKiloByIrsyad}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "(Aju) Laundryman Confirmed Laundryman Status From Order Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 200 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('success');\r",
									"    pm.expect(responseJson.message).to.equal('Laundryman status has been confirmed');\r",
									"    \r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json; charset=utf-8",
								"type": "text"
							},
							{
								"key": "x-access-token",
								"value": "{{accessTokenAju}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "laundryman_status",
									"value": "CONFIRMED",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://localhost:3000/worker/laundryman/{{orderIdCuciKiloByIrsyad}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"worker",
								"laundryman",
								"{{orderIdCuciKiloByIrsyad}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "(Nelson) Shipper Try to Confirmed Laundryman Status From Order Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 403 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(403);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('fail');\r",
									"    pm.expect(responseJson.message).to.equal('Require Laundryman Role');\r",
									"    \r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json; charset=utf-8",
								"type": "text"
							},
							{
								"key": "x-access-token",
								"value": "{{accessTokenNelson}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "receiver_status",
									"value": "CONFIRMED",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://localhost:3000/worker/laundryman/{{orderIdCuciKiloByIrsyad}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"worker",
								"laundryman",
								"{{orderIdCuciKiloByIrsyad}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "(Nelson) Shipper Confirmed Shipper Status From Order Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 200 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('success');\r",
									"    pm.expect(responseJson.message).to.equal('Shipper status has been confirmed');\r",
									"    \r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json; charset=utf-8",
								"type": "text"
							},
							{
								"key": "x-access-token",
								"value": "{{accessTokenNelson}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "shipper_status",
									"value": "DELIVERED",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://localhost:3000/worker/shipper/{{orderIdCuciKiloByIrsyad}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"worker",
								"shipper",
								"{{orderIdCuciKiloByIrsyad}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "(Irsyad) User Change Delivery Address",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 200 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('success');\r",
									"    pm.expect(responseJson.message).to.be.an('string');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json; charset=utf-8",
								"type": "text"
							},
							{
								"key": "x-access-token",
								"value": "{{accessTokenIrsyad}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "delivery_to",
									"value": "Kopo",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://localhost:3000/order/{{userIdIrsyad}}/{{orderIdCuciSepatuByIrsyad}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"order",
								"{{userIdIrsyad}}",
								"{{orderIdCuciSepatuByIrsyad}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "(Irsyad) Get Order with Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 200 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('success');\r",
									"    pm.expect(responseJson.id).to.be.a('string');\r",
									"    pm.expect(responseJson.totalPrice).to.be.a('number');\r",
									"    pm.expect(responseJson.message).to.be.an('string');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json; charset=utf-8",
								"type": "text"
							},
							{
								"key": "x-access-token",
								"value": "{{accessTokenIrsyad}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://localhost:3000/order/{{userIdIrsyad}}/{{orderIdCuciKiloByIrsyad}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"order",
								"{{userIdIrsyad}}",
								"{{orderIdCuciKiloByIrsyad}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "(Agus) Get Order with Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 200 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('success');\r",
									"    pm.expect(responseJson.id).to.be.a('string');\r",
									"    pm.expect(responseJson.totalPrice).to.be.a('number');\r",
									"    pm.expect(responseJson.message).to.be.an('string');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json; charset=utf-8",
								"type": "text"
							},
							{
								"key": "x-access-token",
								"value": "{{accessTokenAgus}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://localhost:3000/order/{{userIdAgus}}/{{orderIdCuciJasByAgus}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"order",
								"{{userIdAgus}}",
								"{{orderIdCuciJasByAgus}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "(Irsyad) Get All Order by User Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 200 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('success');\r",
									"    pm.expect(responseJson.count).to.be.a('number');\r",
									"    pm.expect(responseJson.list_order).to.be.an('array');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json; charset=utf-8",
								"type": "text"
							},
							{
								"key": "x-access-token",
								"value": "{{accessTokenIrsyad}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://localhost:3000/order/{{userIdIrsyad}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"order",
								"{{userIdIrsyad}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "(Agus) Get All Order by User Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 200 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('success');\r",
									"    pm.expect(responseJson.count).to.be.a('number');\r",
									"    pm.expect(responseJson.list_order).to.be.an('array');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json; charset=utf-8",
								"type": "text"
							},
							{
								"key": "x-access-token",
								"value": "{{accessTokenAgus}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://localhost:3000/order/{{userIdAgus}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"order",
								"{{userIdAgus}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "(Admin) Get All Order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 200 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('success');\r",
									"    pm.expect(responseJson.count).to.be.a('number');\r",
									"    pm.expect(responseJson.list_order).to.be.an('array');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json; charset=utf-8",
								"type": "text"
							},
							{
								"key": "x-access-token",
								"value": "{{accessTokenAdmin}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": []
						},
						"url": {
							"raw": "http://localhost:3000/admin/allorder",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"admin",
								"allorder"
							]
						}
					},
					"response": []
				},
				{
					"name": "(Irsyad) User Tries to Cancel an Crder When the Order is Already Being Processed",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 400 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.message).to.be.an('string');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json; charset=utf-8",
								"type": "text"
							},
							{
								"key": "x-access-token",
								"value": "{{accessTokenIrsyad}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://localhost:3000/order/{{userIdIrsyad}}/{{orderIdCuciKiloByIrsyad}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"order",
								"{{userIdIrsyad}}",
								"{{orderIdCuciKiloByIrsyad}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "(Irsyad) User Cancel an Crder When the Order is Before Processed",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 200 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('success');\r",
									"    pm.expect(responseJson.message).to.equal('Order has been cancel');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json; charset=utf-8",
								"type": "text"
							},
							{
								"key": "x-access-token",
								"value": "{{accessTokenIrsyad}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://localhost:3000/order/{{userIdIrsyad}}/{{orderIdJasByIrsyad}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"order",
								"{{userIdIrsyad}}",
								"{{orderIdJasByIrsyad}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Delete All Data at Worker Table",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('it should response 200 status code', () => {\r",
							"    pm.expect(pm.response).to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test('response Content-Type header should have application/json value', () => {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
							"}); \r",
							"\r",
							"pm.test('response body should an object', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson).to.be.an('object');\r",
							"});\r",
							"\r",
							"pm.test('response body have correct property and value', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"\r",
							"    pm.expect(responseJson.status).to.equal('success');\r",
							"    pm.expect(responseJson.message).to.equal('Delete all data success');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json; charset=utf-8",
						"type": "text"
					},
					{
						"key": "x-access-token",
						"value": "{{accessTokenAdmin}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "http://localhost:3000/worker",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"worker"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete All Data at Order Table",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('it should response 200 status code', () => {\r",
							"    pm.expect(pm.response).to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test('response Content-Type header should have application/json value', () => {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
							"}); \r",
							"\r",
							"pm.test('response body should an object', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson).to.be.an('object');\r",
							"});\r",
							"\r",
							"pm.test('response body have correct property and value', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"\r",
							"    pm.expect(responseJson.status).to.equal('success');\r",
							"    pm.expect(responseJson.message).to.equal('Delete all data success');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json; charset=utf-8",
						"type": "text"
					},
					{
						"key": "x-access-token",
						"value": "{{accessTokenAdmin}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "http://localhost:3000/order",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"order"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete All Data at User Table",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('it should response 200 status code', () => {\r",
							"    pm.expect(pm.response).to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test('response Content-Type header should have application/json value', () => {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
							"}); \r",
							"\r",
							"pm.test('response body should an object', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson).to.be.an('object');\r",
							"});\r",
							"\r",
							"pm.test('response body have correct property and value', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"\r",
							"    pm.expect(responseJson.status).to.equal('success');\r",
							"    pm.expect(responseJson.message).to.equal('Delete all data success');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json; charset=utf-8",
						"type": "text"
					},
					{
						"key": "x-access-token",
						"value": "{{accessTokenAdmin}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "http://localhost:3000/user",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"user"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete All Data at Admin Table",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('it should response 200 status code', () => {\r",
							"    pm.expect(pm.response).to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test('response Content-Type header should have application/json value', () => {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
							"}); \r",
							"\r",
							"pm.test('response body should an object', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson).to.be.an('object');\r",
							"});\r",
							"\r",
							"pm.test('response body have correct property and value', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"\r",
							"    pm.expect(responseJson.status).to.equal('success');\r",
							"    pm.expect(responseJson.message).to.equal('Delete all data success');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json; charset=utf-8",
						"type": "text"
					},
					{
						"key": "x-access-token",
						"value": "{{accessTokenAdmin}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "http://localhost:3000/admin",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"admin"
					]
				}
			},
			"response": []
		}
	]
}